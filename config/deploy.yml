# Name of your application. Used to uniquely configure containers.
service: activerabbit

# Name of the container image.
image: ghcr.io/nextsoft-io/activerabbit

# Deploy to these servers.
servers:
  web:
    - 5.78.134.55
  job:
    hosts:
      - 5.78.134.55
    cmd: bundle exec sidekiq -q default -q ingest

# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption.
proxy:
  ssl: true
  host: app.example.com

# Credentials for your image host.
registry:
  # Using GitHub Container Registry
  server: ghcr.io
  username: nextsoft-io

  # Always use an access token rather than real password when possible.
  password:
    - KAMAL_REGISTRY_PASSWORD

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
  secret:
    - RAILS_MASTER_KEY
    - DATABASE_URL
    - REDIS_URL
    - SECRET_KEY_BASE
    - STRIPE_SECRET_KEY
    - STRIPE_SIGNING_SECRET
    - SMTP_PASSWORD
    - ACTIVERABBIT_DATABASE_PASSWORD
    - PGHOST
    - PGPORT
    - PGUSER
    - PGPASSWORD
    - PGDATABASE
  clear:
    RAILS_ENV: production
    RAILS_LOG_TO_STDOUT: true
    RAILS_SERVE_STATIC_FILES: true

    # Performance configuration
    WEB_CONCURRENCY: 2
    RAILS_MAX_THREADS: 5

    # Sidekiq configuration
    SIDEKIQ_CONCURRENCY: 10

    # Public keys (non-sensitive)
    STRIPE_PUBLIC_KEY: pk_live_your_stripe_public_key
    MAILER_FROM_EMAIL: noreply@your-domain.com
    ALERT_FROM_EMAIL: alerts@your-domain.com
    SMTP_HOST: smtp.your-provider.com
    SMTP_PORT: 587
    SMTP_USERNAME: your-smtp-username

    # Security
    FORCE_SSL: true
    RACK_ATTACK_ENABLED: true

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
aliases:
  console: app exec --interactive --reuse "bin/rails console"
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  dbc: app exec --interactive --reuse "bin/rails dbconsole"


# Use a persistent storage volume for sqlite database files and local Active Storage files.
# Recommended to change this to a mounted volume path that is backed up off server.
volumes:
  - "activerabbit_storage:/rails/storage"


# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
asset_path: /rails/public/assets

# Configure the image builder.
builder:
  arch: amd64

  # # Build image via remote server (useful for faster amd64 builds on arm64 computers)
  # remote: ssh://docker@docker-builder-server
  #
  # # Pass arguments and secrets to the Docker build process
  # args:
  #   RUBY_VERSION: ruby-3.2.3
  # secrets:
  #   - GITHUB_TOKEN
  #   - RAILS_MASTER_KEY

# Use a different ssh user than root
# ssh:
#   user: app

# Use accessory services (secrets come from .kamal/secrets).
# Database is external (Ubicloud PostgreSQL), so we only need Redis for Sidekiq
accessories:
  redis:
    image: redis:7.0
    host: 5.78.134.55
    port: 6379
    directories:
      - data:/data
    env:
      clear:
        REDIS_MAXMEMORY: 256mb
        REDIS_MAXMEMORY_POLICY: allkeys-lru
